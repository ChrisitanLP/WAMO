document.addEventListener('DOMContentLoaded', function() {
    const pickerManager = new PickerManager();
    pickerManager.init();
    
    // Exponer la instancia para depuraci√≥n y posible uso externo
    window.pickerManager = pickerManager;
});

const emojiConfig = {
    categories: [
        { 
            name: 'Emoticonos', 
            icons: ['üòä', 'üòÇ', 'üòç', 'üòí', 'üòò', 'üòé', 'üò°', 'üòç', 'üòó', 'üòú', 'ü§î', 'üòé', 'üòú', 'ü§ó', 'üòÑ', 'üòÜ', 'üòÖ', 'üò©', 'üò¢', 'üò≤', 'üò∞', 'ü•∫', 'üò†', 'üòÆ', 'üò™', 'üò´', 'üò¥', 'üòç', 'üòò', 'üòö', 'üòô', 'ü•≥', 'ü§©', 'üòá', 'ü§î', 'üôÑ', 'üòí', 'ü•∫', 'üò≠', 'üòà', 'üëø', 'üôÉ', 'ü§Ø', 'üò§', 'üò£', 'ü§§', 'ü§™', 'ü§ó', 'üòú', 'üòù', 'üòõ', 'üòé', 'ü§ë', 'üò≤', 'üò≥', 'üò±', 'üò®', 'üò∞', 'üò¢', 'üò•', 'üòì', 'ü§ß', 'ü§Ø', 'üòµ', 'ü§†', 'üò°', 'üò†', 'üò§', 'üò©', 'üò´', 'üò§', 'üòÆ', 'üòØ', 'üò≤']
        },
        { 
            name: 'Actividades', 
            icons: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üèâ', 'üé±', 'ü•Ö', 'üèí', 'üèë', 'üèè', 'ü•é', 'üé£', 'ü§ø', 'üéΩ', 'üèÜ', 'üèÖ', 'ü•á', 'ü•à', 'ü•â', 'üéØ', 'üé≥', 'üéÆ', 'üïπ', 'üé≤', '‚ôü', 'üéØ', 'üé≥', 'üé©', 'üé™', 'üé≠', 'üÉè', 'üé¥', 'üÄÑ', 'üïπ', 'üé≤', 'üé∞', 'üß†', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 'ü•Å', 'üé∫', 'üé∑', 'üé∏', 'üéª', 'üéµ', 'üé∂', 'üéº']
        },
        { 
            name: 'Alimentos y bebidas', 
            icons: ['üçé', 'üçè', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'üçç', 'ü•≠', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•í', 'ü•¨', 'ü•¶', 'ü•ï', 'üßÑ', 'üßÖ', 'üç†', 'ü•î', 'üçØ', 'ü•õ', 'üßÉ', 'üßâ', 'ü•§', 'üçµ', '‚òï', 'üç∂', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üçæ', 'ü•°', 'ü•¢', 'üçΩ', 'üç¥', 'ü•Ñ', 'üç≥', 'ü•ò', 'ü•ó', 'üç≤', 'üçú', 'üçù', 'üçû', 'ü•ê', 'ü•Ø', 'üçî', 'üçü', 'üçï', 'üå≠', 'üçø', 'üç©', 'üç™', 'üéÇ', 'üç∞', 'ü•ß', 'üç´', 'üç¨', 'üç≠', 'üçÆ', 'üçØ', 'üç∞', 'üßÅ']
        },
        { 
            name: 'Personas', 
            icons: ['üë∂', 'üëß', 'üë¶', 'üë©', 'üë®', 'üë¥', 'üëµ', 'üë∂', 'üë∏', 'üë≥', 'üë≤', 'üßï', 'ü§¥', 'üë∏', 'üë∑', 'üëÆ', 'üëØ', 'üëº', 'ü§∞', 'ü§±', 'üë©‚Äçüî¨', 'üë©‚Äçüè´', 'üë©‚Äç‚öïÔ∏è', 'üë©‚Äçüç≥', 'üë©‚Äçüéì', 'üë©‚Äçüöí', 'üë©‚Äç‚úàÔ∏è', 'üë©‚ÄçüöÄ', 'üë©‚Äç‚öñÔ∏è', 'üßë‚Äçüßë', 'üë©‚Äçüßë', 'üßë‚Äçü§ù‚Äçüßë', 'üë¨', 'üë≠', 'üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', 'üë®‚Äç‚ù§Ô∏è‚Äçüë®', 'üë®‚Äç‚ù§Ô∏è‚Äçüë©', 'üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'üë®‚Äç‚ù§Ô∏è‚Äçüë©', 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', 'üë®‚Äç‚ù§Ô∏è‚Äçüë®']
        },
        { 
            name: 'Animales', 
            icons: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'ü¶Å', 'üêØ', 'üê®', 'ü¶ù', 'ü¶ã', 'üêû', 'üêú', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç', 'üêç', 'ü¶é', 'üê¢', 'üê∏', 'ü¶â', 'ü¶Ö', 'ü¶ú', 'ü¶ö', 'ü¶Ü', 'ü¶ë', 'üêô','ü¶û', 'ü¶à', 'üê†', 'üêü', 'üê°', 'ü¶ï', 'ü¶ñ', 'üê¨', 'üê≥', 'üêã', 'ü¶ë', 'ü¶ö', 'ü¶ú', 'ü¶á', 'ü¶¶', 'ü¶à', 'ü¶ü', 'ü¶†', 'ü¶ê', 'ü¶ã', 'ü¶Ñ', 'üêâ']
        },
        { 
            name: 'Viajes y lugares', 
            icons: ['üåç', 'üåé', 'üåè', 'üèîÔ∏è', '‚õ∞Ô∏è', 'üóª', 'üåã', 'üèúÔ∏è', 'üèùÔ∏è', 'üèñÔ∏è', 'üèïÔ∏è', 'üè†', 'üè°', 'üèòÔ∏è', 'üèöÔ∏è', 'üèõÔ∏è', 'üèüÔ∏è', 'üèóÔ∏è', 'üèòÔ∏è', 'üèöÔ∏è', 'üïå', 'üïç', 'üïã', '‚õ™', 'üõï', 'üè∞', 'üèØ', 'üè¨', 'üè¢', 'üè£', 'üè§', 'üè•', 'üè¶', 'üè™', 'üè´', 'üè©', 'üè®']
        },
        { 
            name: 'Objetos', 
            icons: ['üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üìπ', 'üì∫', 'üì∑', 'üì∏', 'üìΩ', 'üé•', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üìß', 'üì®', 'üì©', 'üì™', 'üì´', 'üì¨', 'üì≠', 'üìÆ', 'üìØ', 'üì•', 'üì§']
        },
        { 
            name: 'Simbolos', 
            icons: ['‚ù§Ô∏è', 'üíî', 'üíñ', 'üíó', 'üíô', 'üíö', 'üíõ', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíù', 'üíû', 'üíü', '‚ù£Ô∏è', 'üíï', 'üíì', 'üíî', 'üß°', 'üíØ']
        }
    ]
};

class PickerManager {
    constructor() {
        this.elements = {
            emojiBtn: document.getElementById('emoji-btn'),
            closeEmojiPickerBtn: document.getElementById('close-emoji-picker'),
            emojiPicker: document.getElementById('emoji-picker'),
            emojiPickerBody: document.querySelector('.emoji-picker-body'),
            messageInput: document.getElementById('message-input'),
            stickerPicker: document.getElementById('sticker-picker'),
            plusPicker: document.getElementById('plus-picker'),
            plusBtn: document.getElementById('plus-btn')
        };
        
        this.currentOpenPicker = null;
        this.initialized = false;
    }

    /**
     * Inicializa todos los componentes del selector
     */
    init() {
        if (this.initialized) return;
        
        this.setupEventListeners();
        this.renderEmojiPicker();
        
        this.initialized = true;
        console.log('Picker Manager inicializado correctamente');
    }

    /**
     * Configura todos los event listeners necesarios
     */
    setupEventListeners() {
        // Event listener para cerrar los pickers al hacer clic fuera
        document.addEventListener('click', this.handleOutsideClick.bind(this));
        
        // Configurar botones si existen
        if (this.elements.emojiBtn) {
            this.elements.emojiBtn.addEventListener('click', this.toggleEmojiPicker.bind(this));
        }
        
        if (this.elements.closeEmojiPickerBtn) {
            this.elements.closeEmojiPickerBtn.addEventListener('click', () => this.closePicker('emojiPicker'));
        }
        
        if (this.elements.plusBtn) {
            this.elements.plusBtn.addEventListener('click', this.togglePlusPicker.bind(this));
        }
    }

    /**
     * Maneja clics fuera de los pickers para cerrarlos
     * @param {Event} e - Evento de clic
     */
    handleOutsideClick(e) {
        const { emojiPicker, emojiBtn, plusPicker, plusBtn, stickerPicker } = this.elements;
        
        // Cerrar emoji picker si est√° abierto y se hace clic fuera
        if (emojiPicker && emojiPicker.style.display === 'block' && 
            !e.target.closest('#emoji-picker, #emoji-btn')) {
            this.closePicker('emojiPicker');
        }
        
        // Cerrar plus picker si est√° abierto y se hace clic fuera
        if (plusPicker && plusPicker.style.display === 'block' && 
            !e.target.closest('#plus-picker, #plus-btn')) {
            this.closePicker('plusPicker');
        }
        
        // Cerrar sticker picker si est√° abierto y se hace clic fuera
        if (stickerPicker && stickerPicker.style.display === 'block' && 
            !e.target.closest('#sticker-picker, .sticker-trigger')) {
            this.closePicker('stickerPicker');
        }
    }

    /**
     * Cierra todos los pickers abiertos
     */
    closeAllPickers() {
        const pickerKeys = ['emojiPicker', 'stickerPicker', 'plusPicker'];
        
        pickerKeys.forEach(key => {
            if (this.elements[key]) {
                this.elements[key].style.display = 'none';
            }
        });
        
        // Resetear el bot√≥n plus a su estado original
        if (this.elements.plusBtn) {
            this.elements.plusBtn.innerHTML = '<i class="fa fa-plus message-icon" aria-hidden="true"></i>';
        }
        
        this.currentOpenPicker = null;
    }

    /**
     * Cierra un picker espec√≠fico
     * @param {string} pickerKey - Clave del picker a cerrar
     */
    closePicker(pickerKey) {
        if (this.elements[pickerKey]) {
            this.elements[pickerKey].style.display = 'none';
            
            if (pickerKey === 'plusPicker' && this.elements.plusBtn) {
                this.elements.plusBtn.innerHTML = '<i class="fa fa-plus message-icon" aria-hidden="true"></i>';
            }
            
            if (this.currentOpenPicker === pickerKey) {
                this.currentOpenPicker = null;
            }
        }
    }

    /**
     * Alterna la visibilidad del selector de emojis
     */
    toggleEmojiPicker() {
        const { emojiPicker } = this.elements;
        
        if (!emojiPicker) return;
        
        const isHidden = emojiPicker.style.display === 'none' || emojiPicker.style.display === '';
        
        if (isHidden) {
            this.closeAllPickers();
            emojiPicker.style.display = 'block';
            this.currentOpenPicker = 'emojiPicker';
        } else {
            emojiPicker.style.display = 'none';
            this.currentOpenPicker = null;
        }
    }

    /**
     * Alterna la visibilidad del selector plus
     */
    togglePlusPicker() {
        const { plusPicker, plusBtn } = this.elements;
        
        if (!plusPicker || !plusBtn) return;
        
        const isHidden = plusPicker.style.display === 'none' || plusPicker.style.display === '';
        
        if (isHidden) {
            this.closeAllPickers();
            plusPicker.style.display = 'block';
            plusBtn.innerHTML = '<i class="fa fa-times message-icon" aria-hidden="true"></i>';
            this.currentOpenPicker = 'plusPicker';
        } else {
            plusPicker.style.display = 'none';
            plusBtn.innerHTML = '<i class="fa fa-plus message-icon" aria-hidden="true"></i>';
            this.currentOpenPicker = null;
        }
    }

    /**
     * Renderiza las categor√≠as y emojis en el selector
     */
    renderEmojiPicker() {
        const { emojiPickerBody, messageInput } = this.elements;
        
        if (!emojiPickerBody || !messageInput) return;
        
        // Limpiar el contenido existente
        emojiPickerBody.innerHTML = '';
        
        // Crear fragmento para optimizar el rendimiento
        const fragment = document.createDocumentFragment();
        
        // Renderizar cada categor√≠a
        emojiConfig.categories.forEach(category => {
            const sectionDiv = this.createCategorySection(category, messageInput);
            fragment.appendChild(sectionDiv);
        });
        
        // A√±adir todo el contenido de una vez para reducir reflow
        emojiPickerBody.appendChild(fragment);
    }

    /**
     * Crea una secci√≥n de categor√≠a con sus emojis
     * @param {Object} category - Datos de la categor√≠a
     * @param {HTMLElement} messageInput - Elemento de entrada de mensaje
     * @returns {HTMLElement} - Elemento div de la secci√≥n
     */
    createCategorySection(category, messageInput) {
        const sectionDiv = document.createElement('div');
        sectionDiv.classList.add('emoji-section');
        
        // Crear encabezado
        const sectionHeader = document.createElement('h3');
        sectionHeader.textContent = category.name;
        sectionDiv.appendChild(sectionHeader);
        
        // Crear contenedor para los emojis (para optimizar el layout)
        const emojiContainer = document.createElement('div');
        emojiContainer.classList.add('emoji-container');
        
        // Creamos fragmento para optimizar rendimiento
        const fragment = document.createDocumentFragment();
        
        // A√±adir emojis
        category.icons.forEach(emoji => {
            const emojiSpan = document.createElement('span');
            emojiSpan.classList.add('emoji');
            emojiSpan.textContent = emoji;
            
            // Usar delegaci√≥n de eventos para mejorar rendimiento
            emojiSpan.dataset.emoji = emoji;
            
            fragment.appendChild(emojiSpan);
        });
        
        emojiContainer.appendChild(fragment);
        sectionDiv.appendChild(emojiContainer);
        
        // A√±adir un √∫nico event listener para todos los emojis de esta secci√≥n
        emojiContainer.addEventListener('click', (e) => {
            const target = e.target;
            
            if (target.classList.contains('emoji')) {
                // Insertamos el emoji en la posici√≥n actual del cursor
                this.insertEmojiAtCursor(messageInput, target.dataset.emoji);
                this.closePicker('emojiPicker');
            }
        });
        
        return sectionDiv;
    }

    /**
     * Inserta un emoji en la posici√≥n actual del cursor
     * @param {HTMLElement} inputElement - Elemento de entrada de texto
     * @param {string} emoji - Emoji a insertar
     */
    insertEmojiAtCursor(inputElement, emoji) {
        if (!inputElement || !emoji) return;
        
        // Guardar posici√≥n del cursor
        const startPos = inputElement.selectionStart;
        const endPos = inputElement.selectionEnd;
        
        // Texto antes y despu√©s del cursor
        const beforeText = inputElement.value.substring(0, startPos);
        const afterText = inputElement.value.substring(endPos);
        
        // Insertar emoji
        inputElement.value = beforeText + emoji + afterText;
        
        // Restaurar posici√≥n del cursor despu√©s del emoji
        const newCursorPos = startPos + emoji.length;
        inputElement.setSelectionRange(newCursorPos, newCursorPos);
        
        // Enfocar el input
        inputElement.focus();
        
        // Disparar evento de cambio para notificar a otros componentes
        const event = new Event('input', { bubbles: true });
        inputElement.dispatchEvent(event);
    }
}
